#!/usr/bin/env python3

import sqlite3
import argparse
import math

# I wrote this quick and dirty script because Isambard2 does not have GNU
# readline headers available and I did not fancy building it from source.
# That meant I couldn't build the sqlite3 executable and check by hand.
# Of course, if we also had NumPy it would be a lot more useful doing things
# this way, as we could also plot results using the SQLite output.

# Unfortunately, the flags table does not get filled in.  It should really
# contain things like the type of flag, so that we can reconstruct the
# flag/parameter choices more accurately with just the database.  As it is,
# you will also need the YAML config file if you want to do that.

def main(args):
    conn = sqlite3.connect(args.file)
    cur = conn.cursor()

    if args.vacuum:
        cur.execute('vacuum;')
        conn.commit()
    else:
        # TODO there are a lot more things that it might be useful to know.
        # These just give a tiny hint.  Having NumPy would really help,
        # but it is not installed on Isambard2 at present.

        print('\nNumber of positions searched:')
        cur.execute('select count(id) from position;')
        print(cur.fetchone())

        # Did the fitnesses of the positions change much?
        cur.execute('select fitness from position;')
        rows = cur.fetchall()  # This gives us a list of tuples
        #sorted_rows = sorted(rows, key=lambda fitness: fitness[0])
        print('Fitnesses found vary between minimum: ', min(rows), ' and maximum: ', max(rows))

        print('\nBest positions found:')
        for row in cur.execute('select * from global_best_history;'):
            print(row)
        print('\n')

    conn.close()


if __name__ == "__main__" :
    parser = argparse.ArgumentParser(
                description='Do some basic sanity checking of SQLite files generated by OptSearch')
    parser.add_argument('-f', '--file', help='The sqlite file to interrogate', dest='file', required=True)
    parser.add_argument('-v', '--vacuum', help='Vacuum database and exit', action='store_true')
    args = parser.parse_args()
    main(args)

